basePath: /
definitions:
  api.CreateUserRequest:
    properties:
      age:
        type: integer
      name:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.UpdateUserRequest:
    properties:
      age:
        type: integer
      name:
        type: string
    type: object
  domain.User:
    properties:
      age:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: a.knnnk@mail.ru
    name: Aleksey Kononenko
  description: Это учебный проект для практики написания на Go
  title: Example user API
  version: "1.0"
paths:
  /user:
    post:
      consumes:
      - application/json
      parameters:
      - description: JSON
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Создание нового пользователя
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Удаление пользователя
      tags:
      - user
    get:
      parameters:
      - description: ID пользователя
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Получение данных о пользователе по его ID
      tags:
      - user
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: query
        name: id
        required: true
        type: integer
      - description: JSON
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Обновление пользователя
      tags:
      - user
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
      summary: Получение списка пользователей
      tags:
      - users
swagger: "2.0"
